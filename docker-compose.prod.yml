version: '3.8'

services:
  counterfactual-lab-prod:
    build:
      context: .
      dockerfile: Dockerfile.security
      target: production
      args:
        BUILDKIT_INLINE_CACHE: 1
    image: counterfactual-lab:${VERSION:-latest}
    container_name: counterfactual-lab-prod
    
    # Security configurations
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/logs:noexec,nosuid,size=50m
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Network configuration
    ports:
      - "8080:8080"
    networks:
      - counterfactual-prod-net
    
    # Environment variables
    environment:
      - COUNTERFACTUAL_LAB_ENV=production
      - ENABLE_TELEMETRY=true
      - LOG_LEVEL=INFO
      - WORKERS=2
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=50
      - TIMEOUT=30
    
    # Volume mounts (read-only where possible)
    volumes:
      - ./data:/app/data:ro
      - outputs:/app/outputs
      - logs:/app/logs
      - type: tmpfs
        target: /app/cache
        tmpfs:
          size: 500m
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Restart policy
    restart: unless-stopped
    
    # Dependencies
    depends_on:
      redis:
        condition: service_healthy
      prometheus:
        condition: service_started
    
    # Logging configuration
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        labels: "service,version"

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: counterfactual-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-defaultpassword}
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
    volumes:
      - redis-data:/data
    networks:
      - counterfactual-prod-net
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: counterfactual-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/ssl/certs:ro
      - nginx-cache:/var/cache/nginx
    networks:
      - counterfactual-prod-net
    depends_on:
      - counterfactual-lab-prod
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: counterfactual-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - counterfactual-prod-net
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: counterfactual-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - counterfactual-prod-net
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  counterfactual-prod-net:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: cf-prod-br
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  outputs:
    driver: local
  logs:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-cache:
    driver: local